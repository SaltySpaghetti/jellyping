// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, created_at)
VALUES ($1, NOW())
RETURNING username, chat_id, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.ChatID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE chat_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, chatID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteUser, chatID)
	return err
}

const getUserByChatId = `-- name: GetUserByChatId :one
SELECT username, chat_id, created_at, updated_at FROM users
WHERE chat_id = $1
`

func (q *Queries) GetUserByChatId(ctx context.Context, chatID pgtype.Int8) (User, error) {
	row := q.db.QueryRow(ctx, getUserByChatId, chatID)
	var i User
	err := row.Scan(
		&i.Username,
		&i.ChatID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, chat_id, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.ChatID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, chat_id, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.ChatID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatId = `-- name: UpdateChatId :one
UPDATE users
SET chat_id = $2,
    updated_at = NOW()
WHERE username = $1
RETURNING username, chat_id, created_at, updated_at
`

type UpdateChatIdParams struct {
	Username string      `json:"username"`
	ChatID   pgtype.Int8 `json:"chatId"`
}

func (q *Queries) UpdateChatId(ctx context.Context, arg UpdateChatIdParams) (User, error) {
	row := q.db.QueryRow(ctx, updateChatId, arg.Username, arg.ChatID)
	var i User
	err := row.Scan(
		&i.Username,
		&i.ChatID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS (
    SELECT 1 FROM users
    WHERE username = $1
) AS exists
`

func (q *Queries) UserExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
